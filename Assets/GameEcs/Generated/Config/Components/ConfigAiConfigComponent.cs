//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity aiConfigEntity { get { return GetGroup(ConfigMatcher.AiConfig).GetSingleEntity(); } }
    public AiConfigComponent aiConfig { get { return aiConfigEntity.aiConfig; } }
    public bool hasAiConfig { get { return aiConfigEntity != null; } }

    public ConfigEntity SetAiConfig(IAiConfig newValue) {
        if (hasAiConfig) {
            throw new Entitas.EntitasException("Could not set AiConfig!\n" + this + " already has an entity with AiConfigComponent!",
                "You should check if the context already has a aiConfigEntity before setting it or use context.ReplaceAiConfig().");
        }
        var entity = CreateEntity();
        entity.AddAiConfig(newValue);
        return entity;
    }

    public void ReplaceAiConfig(IAiConfig newValue) {
        var entity = aiConfigEntity;
        if (entity == null) {
            entity = SetAiConfig(newValue);
        } else {
            entity.ReplaceAiConfig(newValue);
        }
    }

    public void RemoveAiConfig() {
        aiConfigEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public AiConfigComponent aiConfig { get { return (AiConfigComponent)GetComponent(ConfigComponentsLookup.AiConfig); } }
    public bool hasAiConfig { get { return HasComponent(ConfigComponentsLookup.AiConfig); } }

    public void AddAiConfig(IAiConfig newValue) {
        var index = ConfigComponentsLookup.AiConfig;
        var component = (AiConfigComponent)CreateComponent(index, typeof(AiConfigComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAiConfig(IAiConfig newValue) {
        var index = ConfigComponentsLookup.AiConfig;
        var component = (AiConfigComponent)CreateComponent(index, typeof(AiConfigComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveAiConfig() {
        RemoveComponent(ConfigComponentsLookup.AiConfig);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherAiConfig;

    public static Entitas.IMatcher<ConfigEntity> AiConfig {
        get {
            if (_matcherAiConfig == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.AiConfig);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherAiConfig = matcher;
            }

            return _matcherAiConfig;
        }
    }
}
