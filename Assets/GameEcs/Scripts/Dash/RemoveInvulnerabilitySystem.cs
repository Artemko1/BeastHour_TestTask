using System.Collections.Generic;
using Entitas;
using UnityEngine;

public sealed class RemoveInvulnerabilitySystem : ReactiveSystem<GameEntity>
{
    private readonly Contexts _contexts;

    public RemoveInvulnerabilitySystem(Contexts contexts) : base(contexts.game)
    {
        _contexts = contexts;
    }

    protected override ICollector<GameEntity> GetTrigger(IContext<GameEntity> context) =>
        context.CreateCollector(GameMatcher.Timer.Removed());

    protected override bool Filter(GameEntity entity) => !entity.hasTimer && entity.hasOwner && entity.owner.Value.hasInvulnerableEntityLink;

    protected override void Execute(List<GameEntity> entities)
    {
        foreach (var e in entities)
        {
            e.owner.Value.RemoveInvulnerableEntityLink();
            e.Destroy();
        }
    }
}